// Code generated by protoc-gen-go. DO NOT EDIT.
// source: sensorconfig.proto

package config

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type SensorConfigEvent struct {
	Process              string            `protobuf:"bytes,1,opt,name=process,proto3" json:"process,omitempty"`
	ParentProcess        string            `protobuf:"bytes,2,opt,name=parentProcess,proto3" json:"parentProcess,omitempty"`
	Tags                 map[string]string `protobuf:"bytes,3,rep,name=tags,proto3" json:"tags,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *SensorConfigEvent) Reset()         { *m = SensorConfigEvent{} }
func (m *SensorConfigEvent) String() string { return proto.CompactTextString(m) }
func (*SensorConfigEvent) ProtoMessage()    {}
func (*SensorConfigEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_2cfa78ac2d0e71bc, []int{0}
}

func (m *SensorConfigEvent) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SensorConfigEvent.Unmarshal(m, b)
}
func (m *SensorConfigEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SensorConfigEvent.Marshal(b, m, deterministic)
}
func (m *SensorConfigEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SensorConfigEvent.Merge(m, src)
}
func (m *SensorConfigEvent) XXX_Size() int {
	return xxx_messageInfo_SensorConfigEvent.Size(m)
}
func (m *SensorConfigEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_SensorConfigEvent.DiscardUnknown(m)
}

var xxx_messageInfo_SensorConfigEvent proto.InternalMessageInfo

func (m *SensorConfigEvent) GetProcess() string {
	if m != nil {
		return m.Process
	}
	return ""
}

func (m *SensorConfigEvent) GetParentProcess() string {
	if m != nil {
		return m.ParentProcess
	}
	return ""
}

func (m *SensorConfigEvent) GetTags() map[string]string {
	if m != nil {
		return m.Tags
	}
	return nil
}

type AckEvent struct {
	Ack                  int32    `protobuf:"varint,1,opt,name=ack,proto3" json:"ack,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AckEvent) Reset()         { *m = AckEvent{} }
func (m *AckEvent) String() string { return proto.CompactTextString(m) }
func (*AckEvent) ProtoMessage()    {}
func (*AckEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_2cfa78ac2d0e71bc, []int{1}
}

func (m *AckEvent) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AckEvent.Unmarshal(m, b)
}
func (m *AckEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AckEvent.Marshal(b, m, deterministic)
}
func (m *AckEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AckEvent.Merge(m, src)
}
func (m *AckEvent) XXX_Size() int {
	return xxx_messageInfo_AckEvent.Size(m)
}
func (m *AckEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_AckEvent.DiscardUnknown(m)
}

var xxx_messageInfo_AckEvent proto.InternalMessageInfo

func (m *AckEvent) GetAck() int32 {
	if m != nil {
		return m.Ack
	}
	return 0
}

func init() {
	proto.RegisterType((*SensorConfigEvent)(nil), "config.SensorConfigEvent")
	proto.RegisterMapType((map[string]string)(nil), "config.SensorConfigEvent.TagsEntry")
	proto.RegisterType((*AckEvent)(nil), "config.AckEvent")
}

func init() {
	proto.RegisterFile("sensorconfig.proto", fileDescriptor_2cfa78ac2d0e71bc)
}

var fileDescriptor_2cfa78ac2d0e71bc = []byte{
	// 233 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x2a, 0x4e, 0xcd, 0x2b,
	0xce, 0x2f, 0x4a, 0xce, 0xcf, 0x4b, 0xcb, 0x4c, 0xd7, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62,
	0x83, 0xf0, 0x94, 0x8e, 0x32, 0x72, 0x09, 0x06, 0x83, 0xa5, 0x9d, 0xc1, 0x02, 0xae, 0x65, 0xa9,
	0x79, 0x25, 0x42, 0x12, 0x5c, 0xec, 0x05, 0x45, 0xf9, 0xc9, 0xa9, 0xc5, 0xc5, 0x12, 0x8c, 0x0a,
	0x8c, 0x1a, 0x9c, 0x41, 0x30, 0xae, 0x90, 0x0a, 0x17, 0x6f, 0x41, 0x62, 0x51, 0x6a, 0x5e, 0x49,
	0x00, 0x54, 0x9e, 0x09, 0x2c, 0x8f, 0x2a, 0x28, 0x64, 0xce, 0xc5, 0x52, 0x92, 0x98, 0x5e, 0x2c,
	0xc1, 0xac, 0xc0, 0xac, 0xc1, 0x6d, 0xa4, 0xac, 0x07, 0xb5, 0x1a, 0xc3, 0x22, 0xbd, 0x90, 0xc4,
	0xf4, 0x62, 0xd7, 0xbc, 0x92, 0xa2, 0xca, 0x20, 0xb0, 0x06, 0x29, 0x73, 0x2e, 0x4e, 0xb8, 0x90,
	0x90, 0x00, 0x17, 0x73, 0x76, 0x6a, 0x25, 0xd4, 0x05, 0x20, 0xa6, 0x90, 0x08, 0x17, 0x6b, 0x59,
	0x62, 0x4e, 0x69, 0x2a, 0xd4, 0x56, 0x08, 0xc7, 0x8a, 0xc9, 0x82, 0x51, 0x49, 0x86, 0x8b, 0xc3,
	0x31, 0x39, 0x1b, 0xe2, 0x7a, 0x01, 0x2e, 0xe6, 0xc4, 0xe4, 0x6c, 0xb0, 0x3e, 0xd6, 0x20, 0x10,
	0xd3, 0x28, 0x9c, 0x4b, 0x18, 0xd9, 0xee, 0xe0, 0xd4, 0xa2, 0xb2, 0xcc, 0xe4, 0x54, 0x21, 0x07,
	0x2e, 0x7e, 0x88, 0xcb, 0x4a, 0x8b, 0x52, 0x21, 0xf2, 0x42, 0x92, 0x38, 0xdd, 0x2a, 0x25, 0x00,
	0x93, 0x82, 0x59, 0xa4, 0xc1, 0x98, 0xc4, 0x06, 0x0e, 0x4d, 0x63, 0x40, 0x00, 0x00, 0x00, 0xff,
	0xff, 0xc6, 0x75, 0x84, 0x5e, 0x63, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// SensorConfigServiceClient is the client API for SensorConfigService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SensorConfigServiceClient interface {
	ConfigureSensor(ctx context.Context, opts ...grpc.CallOption) (SensorConfigService_ConfigureSensorClient, error)
}

type sensorConfigServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSensorConfigServiceClient(cc grpc.ClientConnInterface) SensorConfigServiceClient {
	return &sensorConfigServiceClient{cc}
}

func (c *sensorConfigServiceClient) ConfigureSensor(ctx context.Context, opts ...grpc.CallOption) (SensorConfigService_ConfigureSensorClient, error) {
	stream, err := c.cc.NewStream(ctx, &_SensorConfigService_serviceDesc.Streams[0], "/config.SensorConfigService/configureSensor", opts...)
	if err != nil {
		return nil, err
	}
	x := &sensorConfigServiceConfigureSensorClient{stream}
	return x, nil
}

type SensorConfigService_ConfigureSensorClient interface {
	Send(*SensorConfigEvent) error
	CloseAndRecv() (*AckEvent, error)
	grpc.ClientStream
}

type sensorConfigServiceConfigureSensorClient struct {
	grpc.ClientStream
}

func (x *sensorConfigServiceConfigureSensorClient) Send(m *SensorConfigEvent) error {
	return x.ClientStream.SendMsg(m)
}

func (x *sensorConfigServiceConfigureSensorClient) CloseAndRecv() (*AckEvent, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(AckEvent)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// SensorConfigServiceServer is the server API for SensorConfigService service.
type SensorConfigServiceServer interface {
	ConfigureSensor(SensorConfigService_ConfigureSensorServer) error
}

// UnimplementedSensorConfigServiceServer can be embedded to have forward compatible implementations.
type UnimplementedSensorConfigServiceServer struct {
}

func (*UnimplementedSensorConfigServiceServer) ConfigureSensor(srv SensorConfigService_ConfigureSensorServer) error {
	return status.Errorf(codes.Unimplemented, "method ConfigureSensor not implemented")
}

func RegisterSensorConfigServiceServer(s *grpc.Server, srv SensorConfigServiceServer) {
	s.RegisterService(&_SensorConfigService_serviceDesc, srv)
}

func _SensorConfigService_ConfigureSensor_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(SensorConfigServiceServer).ConfigureSensor(&sensorConfigServiceConfigureSensorServer{stream})
}

type SensorConfigService_ConfigureSensorServer interface {
	SendAndClose(*AckEvent) error
	Recv() (*SensorConfigEvent, error)
	grpc.ServerStream
}

type sensorConfigServiceConfigureSensorServer struct {
	grpc.ServerStream
}

func (x *sensorConfigServiceConfigureSensorServer) SendAndClose(m *AckEvent) error {
	return x.ServerStream.SendMsg(m)
}

func (x *sensorConfigServiceConfigureSensorServer) Recv() (*SensorConfigEvent, error) {
	m := new(SensorConfigEvent)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _SensorConfigService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "config.SensorConfigService",
	HandlerType: (*SensorConfigServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "configureSensor",
			Handler:       _SensorConfigService_ConfigureSensor_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "sensorconfig.proto",
}
