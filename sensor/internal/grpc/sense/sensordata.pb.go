// Code generated by protoc-gen-go. DO NOT EDIT.
// source: sensordata.proto

package sense

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type SensedData struct {
	Process              string            `protobuf:"bytes,1,opt,name=process,proto3" json:"process,omitempty"`
	ParentProcess        string            `protobuf:"bytes,2,opt,name=parentProcess,proto3" json:"parentProcess,omitempty"`
	Action               string            `protobuf:"bytes,3,opt,name=action,proto3" json:"action,omitempty"`
	Time                 string            `protobuf:"bytes,4,opt,name=time,proto3" json:"time,omitempty"`
	Tags                 map[string]string `protobuf:"bytes,5,rep,name=tags,proto3" json:"tags,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *SensedData) Reset()         { *m = SensedData{} }
func (m *SensedData) String() string { return proto.CompactTextString(m) }
func (*SensedData) ProtoMessage()    {}
func (*SensedData) Descriptor() ([]byte, []int) {
	return fileDescriptor_f1aeedeb82915ab9, []int{0}
}

func (m *SensedData) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SensedData.Unmarshal(m, b)
}
func (m *SensedData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SensedData.Marshal(b, m, deterministic)
}
func (m *SensedData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SensedData.Merge(m, src)
}
func (m *SensedData) XXX_Size() int {
	return xxx_messageInfo_SensedData.Size(m)
}
func (m *SensedData) XXX_DiscardUnknown() {
	xxx_messageInfo_SensedData.DiscardUnknown(m)
}

var xxx_messageInfo_SensedData proto.InternalMessageInfo

func (m *SensedData) GetProcess() string {
	if m != nil {
		return m.Process
	}
	return ""
}

func (m *SensedData) GetParentProcess() string {
	if m != nil {
		return m.ParentProcess
	}
	return ""
}

func (m *SensedData) GetAction() string {
	if m != nil {
		return m.Action
	}
	return ""
}

func (m *SensedData) GetTime() string {
	if m != nil {
		return m.Time
	}
	return ""
}

func (m *SensedData) GetTags() map[string]string {
	if m != nil {
		return m.Tags
	}
	return nil
}

type AckEvent struct {
	Ack                  int32    `protobuf:"varint,1,opt,name=ack,proto3" json:"ack,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AckEvent) Reset()         { *m = AckEvent{} }
func (m *AckEvent) String() string { return proto.CompactTextString(m) }
func (*AckEvent) ProtoMessage()    {}
func (*AckEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_f1aeedeb82915ab9, []int{1}
}

func (m *AckEvent) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AckEvent.Unmarshal(m, b)
}
func (m *AckEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AckEvent.Marshal(b, m, deterministic)
}
func (m *AckEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AckEvent.Merge(m, src)
}
func (m *AckEvent) XXX_Size() int {
	return xxx_messageInfo_AckEvent.Size(m)
}
func (m *AckEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_AckEvent.DiscardUnknown(m)
}

var xxx_messageInfo_AckEvent proto.InternalMessageInfo

func (m *AckEvent) GetAck() int32 {
	if m != nil {
		return m.Ack
	}
	return 0
}

func init() {
	proto.RegisterType((*SensedData)(nil), "sense.SensedData")
	proto.RegisterMapType((map[string]string)(nil), "sense.SensedData.TagsEntry")
	proto.RegisterType((*AckEvent)(nil), "sense.AckEvent")
}

func init() {
	proto.RegisterFile("sensordata.proto", fileDescriptor_f1aeedeb82915ab9)
}

var fileDescriptor_f1aeedeb82915ab9 = []byte{
	// 252 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0x90, 0xcf, 0x4a, 0xc3, 0x40,
	0x10, 0xc6, 0x49, 0x9b, 0x54, 0x33, 0x22, 0xb6, 0x83, 0x48, 0xa8, 0x1e, 0x4a, 0xf1, 0x90, 0x53,
	0xc4, 0x7a, 0x50, 0xbc, 0x09, 0xd6, 0xb3, 0x24, 0xbe, 0xc0, 0xb8, 0x1d, 0x4a, 0x88, 0xee, 0x86,
	0xdd, 0x35, 0xd0, 0xd7, 0xf5, 0x49, 0x64, 0xc7, 0xad, 0x22, 0xde, 0xbe, 0x3f, 0x99, 0xec, 0x8f,
	0x0f, 0xa6, 0x8e, 0xb5, 0x33, 0x76, 0x43, 0x9e, 0xaa, 0xde, 0x1a, 0x6f, 0x30, 0x0b, 0x09, 0x2f,
	0x3f, 0x13, 0x80, 0x26, 0xa8, 0xcd, 0x23, 0x79, 0xc2, 0x02, 0x0e, 0x7a, 0x6b, 0x14, 0x3b, 0x57,
	0x24, 0x8b, 0xa4, 0xcc, 0xeb, 0xbd, 0xc5, 0x4b, 0x38, 0xee, 0xc9, 0xb2, 0xf6, 0xcf, 0xb1, 0x1f,
	0x49, 0xff, 0x37, 0xc4, 0x33, 0x98, 0x90, 0xf2, 0xad, 0xd1, 0xc5, 0x58, 0xea, 0xe8, 0x10, 0x21,
	0xf5, 0xed, 0x3b, 0x17, 0xa9, 0xa4, 0xa2, 0xf1, 0x0a, 0x52, 0x4f, 0x5b, 0x57, 0x64, 0x8b, 0x71,
	0x79, 0xb4, 0x3a, 0xaf, 0x04, 0xa8, 0xfa, 0x85, 0xa9, 0x5e, 0x68, 0xeb, 0xd6, 0xda, 0xdb, 0x5d,
	0x2d, 0x1f, 0xce, 0x6f, 0x21, 0xff, 0x89, 0x70, 0x0a, 0xe3, 0x8e, 0x77, 0x91, 0x32, 0x48, 0x3c,
	0x85, 0x6c, 0xa0, 0xb7, 0x0f, 0x8e, 0x64, 0xdf, 0xe6, 0x7e, 0x74, 0x97, 0x2c, 0x2f, 0xe0, 0xf0,
	0x41, 0x75, 0xeb, 0x81, 0xb5, 0x0f, 0x77, 0xa4, 0x3a, 0xb9, 0xcb, 0xea, 0x20, 0x57, 0x4f, 0x30,
	0x6b, 0x64, 0x9d, 0xf0, 0x68, 0xc3, 0x76, 0x68, 0x15, 0xe3, 0x35, 0xe4, 0xc2, 0x23, 0xab, 0xcc,
	0xfe, 0xb1, 0xcd, 0x4f, 0x62, 0xb4, 0xff, 0x6f, 0x99, 0xbc, 0x4e, 0x64, 0xd8, 0x9b, 0xaf, 0x00,
	0x00, 0x00, 0xff, 0xff, 0xe1, 0x72, 0x22, 0x71, 0x6c, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// SensorDataServiceClient is the client API for SensorDataService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SensorDataServiceClient interface {
	SenseData(ctx context.Context, opts ...grpc.CallOption) (SensorDataService_SenseDataClient, error)
}

type sensorDataServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSensorDataServiceClient(cc grpc.ClientConnInterface) SensorDataServiceClient {
	return &sensorDataServiceClient{cc}
}

func (c *sensorDataServiceClient) SenseData(ctx context.Context, opts ...grpc.CallOption) (SensorDataService_SenseDataClient, error) {
	stream, err := c.cc.NewStream(ctx, &_SensorDataService_serviceDesc.Streams[0], "/sense.SensorDataService/senseData", opts...)
	if err != nil {
		return nil, err
	}
	x := &sensorDataServiceSenseDataClient{stream}
	return x, nil
}

type SensorDataService_SenseDataClient interface {
	Send(*SensedData) error
	CloseAndRecv() (*AckEvent, error)
	grpc.ClientStream
}

type sensorDataServiceSenseDataClient struct {
	grpc.ClientStream
}

func (x *sensorDataServiceSenseDataClient) Send(m *SensedData) error {
	return x.ClientStream.SendMsg(m)
}

func (x *sensorDataServiceSenseDataClient) CloseAndRecv() (*AckEvent, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(AckEvent)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// SensorDataServiceServer is the server API for SensorDataService service.
type SensorDataServiceServer interface {
	SenseData(SensorDataService_SenseDataServer) error
}

// UnimplementedSensorDataServiceServer can be embedded to have forward compatible implementations.
type UnimplementedSensorDataServiceServer struct {
}

func (*UnimplementedSensorDataServiceServer) SenseData(srv SensorDataService_SenseDataServer) error {
	return status.Errorf(codes.Unimplemented, "method SenseData not implemented")
}

func RegisterSensorDataServiceServer(s *grpc.Server, srv SensorDataServiceServer) {
	s.RegisterService(&_SensorDataService_serviceDesc, srv)
}

func _SensorDataService_SenseData_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(SensorDataServiceServer).SenseData(&sensorDataServiceSenseDataServer{stream})
}

type SensorDataService_SenseDataServer interface {
	SendAndClose(*AckEvent) error
	Recv() (*SensedData, error)
	grpc.ServerStream
}

type sensorDataServiceSenseDataServer struct {
	grpc.ServerStream
}

func (x *sensorDataServiceSenseDataServer) SendAndClose(m *AckEvent) error {
	return x.ServerStream.SendMsg(m)
}

func (x *sensorDataServiceSenseDataServer) Recv() (*SensedData, error) {
	m := new(SensedData)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _SensorDataService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "sense.SensorDataService",
	HandlerType: (*SensorDataServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "senseData",
			Handler:       _SensorDataService_SenseData_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "sensordata.proto",
}
