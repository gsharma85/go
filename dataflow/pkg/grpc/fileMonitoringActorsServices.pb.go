// Code generated by protoc-gen-go. DO NOT EDIT.
// source: fileMonitoringActorsServices.proto

package grpc

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	data "github.com/gsharma85/go/dataflow/pkg/data"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

func init() {
	proto.RegisterFile("fileMonitoringActorsServices.proto", fileDescriptor_084b088c1e0b3a9c)
}

var fileDescriptor_084b088c1e0b3a9c = []byte{
	// 164 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x52, 0x4a, 0xcb, 0xcc, 0x49,
	0xf5, 0xcd, 0xcf, 0xcb, 0x2c, 0xc9, 0x2f, 0xca, 0xcc, 0x4b, 0x77, 0x4c, 0x2e, 0xc9, 0x2f, 0x2a,
	0x0e, 0x4e, 0x2d, 0x2a, 0xcb, 0x4c, 0x4e, 0x2d, 0xd6, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x97, 0xe2,
	0x49, 0x2d, 0x4b, 0xcd, 0x2b, 0x81, 0xf2, 0x8c, 0xfc, 0xb8, 0x14, 0xdc, 0x30, 0xf5, 0x04, 0x57,
	0x16, 0x97, 0xa4, 0xe6, 0x42, 0x35, 0x0a, 0x69, 0x71, 0xf1, 0x67, 0x24, 0xe6, 0xa5, 0xe4, 0xa4,
	0x82, 0x54, 0xba, 0x82, 0x74, 0x0b, 0x71, 0xe9, 0xc1, 0xd9, 0x52, 0x9c, 0x7a, 0x8e, 0xc9, 0xd9,
	0x60, 0xa6, 0x06, 0xa3, 0x93, 0x76, 0x94, 0x66, 0x7a, 0x66, 0x49, 0x46, 0x69, 0x92, 0x5e, 0x72,
	0x7e, 0xae, 0x7e, 0x7a, 0x71, 0x46, 0x62, 0x51, 0x6e, 0xa2, 0x85, 0xa9, 0x7e, 0x7a, 0xbe, 0x7e,
	0x4a, 0x62, 0x49, 0x62, 0x5a, 0x4e, 0x7e, 0xb9, 0x7e, 0x41, 0x76, 0xba, 0x7e, 0x7a, 0x51, 0x41,
	0x72, 0x12, 0x1b, 0xd8, 0x0d, 0xc6, 0x80, 0x00, 0x00, 0x00, 0xff, 0xff, 0x9a, 0x14, 0xfc, 0x7e,
	0xb7, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// FileMonitoringActorSystemServiceClient is the client API for FileMonitoringActorSystemService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type FileMonitoringActorSystemServiceClient interface {
	HandleFileEvent(ctx context.Context, opts ...grpc.CallOption) (FileMonitoringActorSystemService_HandleFileEventClient, error)
}

type fileMonitoringActorSystemServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFileMonitoringActorSystemServiceClient(cc grpc.ClientConnInterface) FileMonitoringActorSystemServiceClient {
	return &fileMonitoringActorSystemServiceClient{cc}
}

func (c *fileMonitoringActorSystemServiceClient) HandleFileEvent(ctx context.Context, opts ...grpc.CallOption) (FileMonitoringActorSystemService_HandleFileEventClient, error) {
	stream, err := c.cc.NewStream(ctx, &_FileMonitoringActorSystemService_serviceDesc.Streams[0], "/FileMonitoringActorSystemService/handleFileEvent", opts...)
	if err != nil {
		return nil, err
	}
	x := &fileMonitoringActorSystemServiceHandleFileEventClient{stream}
	return x, nil
}

type FileMonitoringActorSystemService_HandleFileEventClient interface {
	Send(*data.FileEvent) error
	CloseAndRecv() (*data.AckEvent, error)
	grpc.ClientStream
}

type fileMonitoringActorSystemServiceHandleFileEventClient struct {
	grpc.ClientStream
}

func (x *fileMonitoringActorSystemServiceHandleFileEventClient) Send(m *data.FileEvent) error {
	return x.ClientStream.SendMsg(m)
}

func (x *fileMonitoringActorSystemServiceHandleFileEventClient) CloseAndRecv() (*data.AckEvent, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(data.AckEvent)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// FileMonitoringActorSystemServiceServer is the server API for FileMonitoringActorSystemService service.
type FileMonitoringActorSystemServiceServer interface {
	HandleFileEvent(FileMonitoringActorSystemService_HandleFileEventServer) error
}

// UnimplementedFileMonitoringActorSystemServiceServer can be embedded to have forward compatible implementations.
type UnimplementedFileMonitoringActorSystemServiceServer struct {
}

func (*UnimplementedFileMonitoringActorSystemServiceServer) HandleFileEvent(srv FileMonitoringActorSystemService_HandleFileEventServer) error {
	return status.Errorf(codes.Unimplemented, "method HandleFileEvent not implemented")
}

func RegisterFileMonitoringActorSystemServiceServer(s *grpc.Server, srv FileMonitoringActorSystemServiceServer) {
	s.RegisterService(&_FileMonitoringActorSystemService_serviceDesc, srv)
}

func _FileMonitoringActorSystemService_HandleFileEvent_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(FileMonitoringActorSystemServiceServer).HandleFileEvent(&fileMonitoringActorSystemServiceHandleFileEventServer{stream})
}

type FileMonitoringActorSystemService_HandleFileEventServer interface {
	SendAndClose(*data.AckEvent) error
	Recv() (*data.FileEvent, error)
	grpc.ServerStream
}

type fileMonitoringActorSystemServiceHandleFileEventServer struct {
	grpc.ServerStream
}

func (x *fileMonitoringActorSystemServiceHandleFileEventServer) SendAndClose(m *data.AckEvent) error {
	return x.ServerStream.SendMsg(m)
}

func (x *fileMonitoringActorSystemServiceHandleFileEventServer) Recv() (*data.FileEvent, error) {
	m := new(data.FileEvent)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _FileMonitoringActorSystemService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "FileMonitoringActorSystemService",
	HandlerType: (*FileMonitoringActorSystemServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "handleFileEvent",
			Handler:       _FileMonitoringActorSystemService_HandleFileEvent_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "fileMonitoringActorsServices.proto",
}
