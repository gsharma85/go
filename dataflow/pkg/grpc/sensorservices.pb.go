// Code generated by protoc-gen-go. DO NOT EDIT.
// source: sensorservices.proto

package grpc

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	data "github.com/gsharma85/go/dataflow/pkg/data"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

func init() {
	proto.RegisterFile("sensorservices.proto", fileDescriptor_250162f9d8688e02)
}

var fileDescriptor_250162f9d8688e02 = []byte{
	// 146 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x29, 0x4e, 0xcd, 0x2b,
	0xce, 0x2f, 0x2a, 0x4e, 0x2d, 0x2a, 0xcb, 0x4c, 0x4e, 0x2d, 0xd6, 0x2b, 0x28, 0xca, 0x2f, 0xc9,
	0x97, 0xe2, 0x49, 0x2d, 0x4b, 0xcd, 0x2b, 0x81, 0xf2, 0x8c, 0x6c, 0xb9, 0x04, 0xdd, 0x32, 0x73,
	0x52, 0x83, 0xc1, 0x2a, 0x83, 0x21, 0x2a, 0x85, 0x34, 0xb8, 0x78, 0x8b, 0x53, 0xf3, 0x52, 0x40,
	0x12, 0xae, 0x20, 0xc5, 0x42, 0x5c, 0x7a, 0x70, 0xb6, 0x14, 0xa7, 0x9e, 0x63, 0x72, 0x36, 0x98,
	0xa9, 0xc1, 0xe8, 0xa4, 0x1d, 0xa5, 0x99, 0x9e, 0x59, 0x92, 0x51, 0x9a, 0xa4, 0x97, 0x9c, 0x9f,
	0xab, 0x9f, 0x5e, 0x9c, 0x91, 0x58, 0x94, 0x9b, 0x68, 0x61, 0xaa, 0x9f, 0x9e, 0xaf, 0x9f, 0x92,
	0x58, 0x92, 0x98, 0x96, 0x93, 0x5f, 0xae, 0x5f, 0x90, 0x9d, 0xae, 0x9f, 0x5e, 0x54, 0x90, 0x9c,
	0xc4, 0x06, 0xb6, 0xd2, 0x18, 0x10, 0x00, 0x00, 0xff, 0xff, 0x4f, 0xe4, 0xf1, 0x64, 0x98, 0x00,
	0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// FileSensorServiceClient is the client API for FileSensorService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type FileSensorServiceClient interface {
	SendFileEvent(ctx context.Context, opts ...grpc.CallOption) (FileSensorService_SendFileEventClient, error)
}

type fileSensorServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFileSensorServiceClient(cc grpc.ClientConnInterface) FileSensorServiceClient {
	return &fileSensorServiceClient{cc}
}

func (c *fileSensorServiceClient) SendFileEvent(ctx context.Context, opts ...grpc.CallOption) (FileSensorService_SendFileEventClient, error) {
	stream, err := c.cc.NewStream(ctx, &_FileSensorService_serviceDesc.Streams[0], "/FileSensorService/sendFileEvent", opts...)
	if err != nil {
		return nil, err
	}
	x := &fileSensorServiceSendFileEventClient{stream}
	return x, nil
}

type FileSensorService_SendFileEventClient interface {
	Send(*data.FileEvent) error
	CloseAndRecv() (*data.AckEvent, error)
	grpc.ClientStream
}

type fileSensorServiceSendFileEventClient struct {
	grpc.ClientStream
}

func (x *fileSensorServiceSendFileEventClient) Send(m *data.FileEvent) error {
	return x.ClientStream.SendMsg(m)
}

func (x *fileSensorServiceSendFileEventClient) CloseAndRecv() (*data.AckEvent, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(data.AckEvent)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// FileSensorServiceServer is the server API for FileSensorService service.
type FileSensorServiceServer interface {
	SendFileEvent(FileSensorService_SendFileEventServer) error
}

// UnimplementedFileSensorServiceServer can be embedded to have forward compatible implementations.
type UnimplementedFileSensorServiceServer struct {
}

func (*UnimplementedFileSensorServiceServer) SendFileEvent(srv FileSensorService_SendFileEventServer) error {
	return status.Errorf(codes.Unimplemented, "method SendFileEvent not implemented")
}

func RegisterFileSensorServiceServer(s *grpc.Server, srv FileSensorServiceServer) {
	s.RegisterService(&_FileSensorService_serviceDesc, srv)
}

func _FileSensorService_SendFileEvent_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(FileSensorServiceServer).SendFileEvent(&fileSensorServiceSendFileEventServer{stream})
}

type FileSensorService_SendFileEventServer interface {
	SendAndClose(*data.AckEvent) error
	Recv() (*data.FileEvent, error)
	grpc.ServerStream
}

type fileSensorServiceSendFileEventServer struct {
	grpc.ServerStream
}

func (x *fileSensorServiceSendFileEventServer) SendAndClose(m *data.AckEvent) error {
	return x.ServerStream.SendMsg(m)
}

func (x *fileSensorServiceSendFileEventServer) Recv() (*data.FileEvent, error) {
	m := new(data.FileEvent)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _FileSensorService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "FileSensorService",
	HandlerType: (*FileSensorServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "sendFileEvent",
			Handler:       _FileSensorService_SendFileEvent_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "sensorservices.proto",
}
